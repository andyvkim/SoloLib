{
  "ConnectionStrings": {
    "LibsConnection": "Server=(localDB)\\MSSQLLocalDB;Database=LibsDev;Trusted_Connection=true;MultipleActiveResultSets=true"
  },
  "Logging": {
    "IncludeScopes": false,
    "LogLevel": {
      "Default": "Warning"
    }
  }
}



/*
	MAKE SURE TO MAKE EVERYTHING PUBLIC
  File Structure
  Solution
    -project called same as solution
      controllers
        -catalogcontoller, homecontroller
      models for the view
        -assetindexlistingmodel which has all the properties
        -assetindexmodel that contains a list of assetindexlistingmodel
      views
        -catalog folder
          -index.cshtml page 
    -c# class library called data
      entity models go here
      install entity frameworkcore, sqlserver,tools
    -c# class library called services
      Interface with stubbed methods go here
      another service class with method implementations go here
*/

/*MAKE SURE TO IMPORT EVERYTHING AT THE TOP AND START AS ASPDOTNETCORE THEN ASPDOTNETCORE MVC APP
-create new project, class library, and call it something-data
-then add entityframeworkcore, entityframeworksqlserver, entityframeworktools from nugetpackage manager to the newly made data class library project
-then create class librarycontext in librarydata, librarycontext must extend DbContext
-in the class of librarycontext, make constructor and pass dbcontextoptions options "(DbContextOptions options) : base(options)"
-In LibraryData make a folder for the models and add db sets of entities in this class "public DbSet<Patron> Patrons { get; set; }"
-in appsettings.json add a connectionstring key with a connection string inside
-example "ConnectionStrings": {
    "LibraryConnection": "Server=(localDB)\\MSSQLLocalDB;Database=LibraryDev3;Trusted_Connection=True;MultipleActiveResultSets=True"
  },

-MAKING FIRST MIGRATION!
-add entity framework core, entity framework core sqlserver to the catalog project
-add reference to library data in librarycatalog
-in startup.cs add services.AddDbContext<LibraryContext>(options => options.UseSqlServer(Configuration.GetConnectionString("LibraryConnection")));
-open package manager consol and set default project as librarydata and type add-migration "Initial Migration" then type "update-database"
-open up sqlserver and begin writing queries!!

-ADD REST OF YOUR MODELS AND DONT FORGET TO MAKE THEM PUBLIC
-then make sure to add dbsets of each model in the library context class
-add-migration "added entity models"
-update-database

-SERVICES
-add new project called library services as a class library and add reference to library data
-add an interface for each model 
  example added interface called ILibraryAsset for LibraryAssets, this will hold CRUD functions
-add methods for each model that return each property in the model
-then create new class to implement the interface
  example LibraryAssetService : ILibraryAsset
-then add an instance of librarycontext to the class because the data needs to be available
  example private LibraryContext _context;
-add a contructor that takes in the instance of LibraryContext as a paramter
  example 
  	private LibraryContext _context; DONT FORGET THIS LINE
        public LibsMethodsServices(LibraryContext context)
        {
            _context = context;
        }
  this will make data available at everyinstance of libraryassetservice
-begin writng crud methods
 example
    {
            return _context.LibraryAssets
                .Include(asset => asset.Status)
                .Include(asset => asset.Location); //returns statuses and location of assets
        }
    public LibraryAsset GetById(int id)
        {
            return _context.LibraryAssets
                .Include(asset => asset.Status)
                .Include(asset => asset.Location)
                .FirstOrDefault(asset => asset.Id == id); return asset where asset.id = id passed as parameter
        }
   public LibraryBranch GetLibraryBranch(int id)
        {
            return GetById(id).Location; LINQ METHOD

        }
  DISCRIMINATOR EXAMPLE
  public string GetAuthorOrDirectorById(int id)
        {
            if (_context.Books.Any(Book => Book.Id == id))
            {
                return _context.Books.FirstOrDefault(Book => Book.Id == id).Author;
            }
            else return _context.Videos.FirstOrDefault(Video => Video.Id == id).Director;
        }

ADD NEW CONTROLLER under controllers and extend controller (import aspdotnetcore.mvc), pay attention to the name of the controller
  this is to handle the data we receive from the service layer to push it to the view

      public class CatalogController : Controller //this class will help push data to the view
    {
        private ILibraryAsset _assets; //instantiate the interface INSIDE THE CLASSS
        public CatalogController(ILibraryAsset assets) //inject the interface into the constructor
        {
            _assets = assets;
        }
    
IN THE MODELS FOLDER WHERE THE ERRORMODEL IS, MAKE A FOLDER FOR WHATEVER ENTITY YOUD LIKE TO SHOW TO THE VIEW Libs => Models => Patron = > PatronModel.CS
  public class AssetIndexListingModel
    {
        public int Id { get; set; }
        public string ImageUrl { get; set; }
        public string Title { get; set; }
        public string AuthorOrDirector { get; set; }
        public string Type { get; set; }
        public string DeweyCallNumber { get; set; }
        public string PhoneNumber { get; set; }
    }

  then back in the catalog controller
   public IActionResult Index()
        {
            var assetModels = _assets.GetAll(); //makes data available via the getall function

            var listingResult = assetModels
                .Select(result => new AssetIndexListingModel //scaffolds the data from assetindexlistingmodel to populate it with values
                {
                    Id = result.Id,
                    ImageUrl = result.ImageUrl,
                    AuthorOrDirector = _assets.GetAuthorOrDirectorById(result.Id),
                    DeweyCallNumber = _assets.GetDeweyIndex(result.Id),
                    Title = result.Title,
                    Type = _assets.GetType(result.Id)
                });
        
 	var model = new AssetIndexModel()
            {
                Assets = listingResult
            };

            return View(model);
        }

  OPTIONAL
  then if you'd like to create a collection of AssetIndexModels, create a new class containing a list of AssetIndexListingModels
  public class AssetIndexModel
    {
        public IEnumerable<AssetIndexListingModel> Assets { get; set; }
    }
  if above is omitted. then in your catalogcontroller just do
  return View(ListingResult); at the last line

  MAKING THE VIEW
  -under view make a new folder called catalog
    -in catalog create a new item MVC VIEW PAGE
  -start formatting html and razor
  
  Back in the startupclass under the configureservices method where the database was connected
  -add 
      services.AddSingleton(Configuration);
      services.AddScoped<ILibraryAsset, LibraryAssetService>(); //dependency injection. injects the interface and the implementing class to the application

  Go back to MSSQLSERVER
  -add dummy data
   






*/


